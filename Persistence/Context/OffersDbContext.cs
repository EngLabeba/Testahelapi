using Microsoft.EntityFrameworkCore;
using Domain.Entities;

namespace Persistence.Context
{
    public class OffersDbContext : DbContext
    {
        public OffersDbContext(DbContextOptions<OffersDbContext> options) : base(options)
        {
        }

        public DbSet<Offer> Offers { get; set; }
        public DbSet<OfferCategory> OfferCategories { get; set; }
        public DbSet<OfferLocation> OfferLocations { get; set; }
        public DbSet<OfferPlatform> OfferPlatforms { get; set; }
        public DbSet<OfferSharingMethod> OfferSharingMethods { get; set; }
        public DbSet<Dependent> Dependents { get; set; }
        public DbSet<SavedOffer> SavedOffers { get; set; }
        public DbSet<DiscountType> DiscountTypes { get; set; }
        public DbSet<OfferShare> OfferShares { get; set; }
        public DbSet<Employee> Employees { get; set; }
        public DbSet<OfferUsage> OfferUsages { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            // Configure Offer entity
            modelBuilder.Entity<Offer>(entity =>
            {
                entity.HasKey(e => e.Id);
                entity.Property(e => e.Id).ValueGeneratedNever(); // GUID generated by application
                entity.Property(e => e.Title).IsRequired().HasMaxLength(200);
                entity.Property(e => e.Description).HasMaxLength(1000);
                entity.Property(e => e.DiscountValue).IsRequired().HasMaxLength(100);
                entity.Property(e => e.CreatedAt).IsRequired();
                entity.Property(e => e.ValidFrom).IsRequired();
                entity.Property(e => e.ValidUntil).IsRequired();
             
                entity.Property(e => e.ImageUrl).HasMaxLength(500);
                entity.Property(e => e.Name).IsRequired().HasMaxLength(100);
                entity.Property(e => e.TermsAndConditions).HasMaxLength(500);
                entity.Property(e => e.OrganizationName).HasMaxLength(200);
                entity.Property(e => e.OrganizationNameEnglish).HasMaxLength(200);
                entity.Property(e => e.DirectionsUrl).HasMaxLength(500);
                entity.Property(e => e.Rating).HasColumnType("decimal(3,2)");
                entity.Property(e => e.IsActive).IsRequired();

                entity.HasOne(e => e.Category)
                    .WithMany(c => c.Offers)
                    .HasForeignKey(e => e.CategoryId)
                    .OnDelete(DeleteBehavior.Restrict);

                entity.HasOne(e => e.DiscountType)
                    .WithMany(d => d.Offers)
                    .HasForeignKey(e => e.DiscountTypeId)
                    .OnDelete(DeleteBehavior.Restrict);

                // Many-to-many relationship with Locations
                entity.HasMany(e => e.Locations)
                    .WithMany(l => l.Offers)
                    .UsingEntity("OfferOfferLocation");

                // Many-to-many relationship with Platforms
                entity.HasMany(e => e.Platforms)
                    .WithMany(p => p.Offers)
                    .UsingEntity("OfferOfferPlatform");

                // Many-to-many relationship with SharingMethods
                entity.HasMany(e => e.SharingMethods)
                    .WithMany(s => s.Offers)
                    .UsingEntity("OfferOfferSharingMethod");

                entity.HasMany(e => e.SavedOffers)
                    .WithOne(s => s.Offer)
                    .HasForeignKey(s => s.OfferId)
                    .OnDelete(DeleteBehavior.Cascade);

                entity.HasOne(e => e.Employee)
                    .WithMany()
                    .HasForeignKey(e => e.EmployeeId)
                    .OnDelete(DeleteBehavior.Restrict);
            });

            // Configure Dependent entity
            modelBuilder.Entity<Dependent>(entity =>
            {
                entity.HasKey(e => e.Id);
                entity.Property(e => e.Id).ValueGeneratedOnAdd();
                entity.Property(e => e.Relationship).IsRequired().HasMaxLength(50);
                entity.Property(e => e.RelationshipEnglish).IsRequired().HasMaxLength(50);
                entity.Property(e => e.IsActive).IsRequired();
            });

            // Configure OfferCategory entity
            modelBuilder.Entity<OfferCategory>(entity =>
            {
                entity.HasKey(e => e.Id);
                entity.Property(e => e.Id).ValueGeneratedOnAdd();
                entity.Property(e => e.Name).IsRequired().HasMaxLength(100);
                entity.Property(e => e.Description).HasMaxLength(500);
                entity.Property(e => e.Icon).HasMaxLength(100);
                entity.Property(e => e.IsActive).IsRequired();
            });

            // Configure OfferLocation entity
            modelBuilder.Entity<OfferLocation>(entity =>
            {
                entity.HasKey(e => e.Id);
                entity.Property(e => e.Id).ValueGeneratedOnAdd();
                entity.Property(e => e.Name).IsRequired().HasMaxLength(200);
                entity.Property(e => e.Address).HasMaxLength(500);
                entity.Property(e => e.City).HasMaxLength(100);
                entity.Property(e => e.State).HasMaxLength(100);
                entity.Property(e => e.PostalCode).HasMaxLength(20);
                entity.Property(e => e.Country).HasMaxLength(100);
                entity.Property(e => e.IsActive).IsRequired();
            });


            // Configure OfferPlatform entity
            modelBuilder.Entity<OfferPlatform>(entity =>
            {
                entity.HasKey(e => e.Id);
                entity.Property(e => e.Id).ValueGeneratedOnAdd();
                entity.Property(e => e.Name).IsRequired().HasMaxLength(100);
                entity.Property(e => e.Description).HasMaxLength(500);
                entity.Property(e => e.Icon).HasMaxLength(100);
                entity.Property(e => e.IsActive).IsRequired();
            });

            // Configure OfferSharingMethod entity
            modelBuilder.Entity<OfferSharingMethod>(entity =>
            {
                entity.HasKey(e => e.Id);
                entity.Property(e => e.Id).ValueGeneratedOnAdd();
                entity.Property(e => e.Name).IsRequired().HasMaxLength(100);
                entity.Property(e => e.Description).HasMaxLength(500);
                entity.Property(e => e.Icon).HasMaxLength(100);
                entity.Property(e => e.IsActive).IsRequired();
            });

            // Configure DiscountType entity
            modelBuilder.Entity<DiscountType>(entity =>
            {
                entity.HasKey(e => e.Id);
                entity.Property(e => e.Id).ValueGeneratedOnAdd();
                entity.Property(e => e.Name).IsRequired().HasMaxLength(100);
                entity.Property(e => e.Description).HasMaxLength(500);
                entity.Property(e => e.Icon).HasMaxLength(100);
                entity.Property(e => e.IsActive).IsRequired();
            });

            // Configure SavedOffer entity
            modelBuilder.Entity<SavedOffer>(entity =>
            {
                entity.HasKey(e => e.Id);
                entity.Property(e => e.Id).ValueGeneratedOnAdd();
                entity.Property(e => e.UserId).HasMaxLength(100);
                entity.Property(e => e.Notes).HasMaxLength(500);
                entity.Property(e => e.SavedAt).IsRequired();
                entity.Property(e => e.IsUsed).IsRequired();
                entity.Property(e => e.UsedAt);

                entity.HasOne(e => e.Offer)
                    .WithMany(o => o.SavedOffers)
                    .HasForeignKey(e => e.OfferId)
                    .OnDelete(DeleteBehavior.Cascade);
            });

            // Configure OfferShare entity
            modelBuilder.Entity<OfferShare>(entity =>
            {
                entity.HasKey(e => e.Id);
                entity.Property(e => e.Id).ValueGeneratedOnAdd();
                entity.Property(e => e.SharedByUserId).IsRequired().HasMaxLength(100);
                entity.Property(e => e.SharedWithUserId).HasMaxLength(100);
                entity.Property(e => e.ShareToken).IsRequired().HasMaxLength(500);
                entity.Property(e => e.QrCodeIdentifier).IsRequired().HasMaxLength(50);
                entity.Property(e => e.QrCodeData).IsRequired().HasMaxLength(200);
                entity.Property(e => e.ScannedByUserId).HasMaxLength(100);
                entity.Property(e => e.Notes).HasMaxLength(500);
                entity.Property(e => e.UsageNotes).HasMaxLength(500);
                entity.Property(e => e.SharedAt).IsRequired();
                entity.Property(e => e.IsScanned).IsRequired();
                entity.Property(e => e.IsUsed).IsRequired();

                entity.HasOne(e => e.Offer)
                    .WithMany()
                    .HasForeignKey(e => e.OfferId)
                    .OnDelete(DeleteBehavior.Cascade);

                entity.HasOne(e => e.Dependent)
                    .WithMany()
                    .HasForeignKey(e => e.DependentId)
                    .OnDelete(DeleteBehavior.Restrict);

                entity.HasIndex(e => e.ShareToken).IsUnique();
                entity.HasIndex(e => e.QrCodeIdentifier).IsUnique();
            });

            // Configure Employee entity
            modelBuilder.Entity<Employee>(entity =>
            {
                entity.HasKey(e => e.Id);
                entity.Property(e => e.Id).ValueGeneratedOnAdd();
                entity.Property(e => e.EmployeeId).IsRequired().HasMaxLength(50);
                entity.Property(e => e.Name).IsRequired().HasMaxLength(200);
                entity.Property(e => e.NameEnglish).IsRequired().HasMaxLength(200);
                entity.Property(e => e.Position).IsRequired().HasMaxLength(200);
                entity.Property(e => e.PositionEnglish).IsRequired().HasMaxLength(200);
                entity.Property(e => e.Department).IsRequired().HasMaxLength(200);
                entity.Property(e => e.DepartmentEnglish).IsRequired().HasMaxLength(200);
                entity.Property(e => e.Email).HasMaxLength(100);
                entity.Property(e => e.PhoneNumber).HasMaxLength(20);
                entity.Property(e => e.Rank).IsRequired();
                entity.Property(e => e.IsActive).IsRequired();
                entity.Property(e => e.CreatedAt).IsRequired(); // Add this to force migration

                entity.HasIndex(e => e.EmployeeId).IsUnique();
            });

            // Configure OfferUsage entity
            modelBuilder.Entity<OfferUsage>(entity =>
            {
                entity.HasKey(e => e.Id);
                entity.Property(e => e.Id).ValueGeneratedOnAdd();
                entity.Property(e => e.UsedAt).IsRequired();
                entity.Property(e => e.Notes).HasMaxLength(500);
                entity.Property(e => e.LocationUsed).HasMaxLength(200);
                entity.Property(e => e.AmountSaved).HasColumnType("decimal(18,2)");
                entity.Property(e => e.IsVerified).IsRequired();
                entity.Property(e => e.VerifiedBy).HasMaxLength(100);
                entity.Property(e => e.VerifiedAt);
                entity.Property(e => e.CreatedAt).IsRequired();

                // Configure relationships
                entity.HasOne(ou => ou.Offer)
                    .WithMany()
                    .HasForeignKey(ou => ou.OfferId)
                    .OnDelete(DeleteBehavior.Cascade);

                entity.HasOne(ou => ou.Employee)
                    .WithMany()
                    .HasForeignKey(ou => ou.EmployeeId)
                    .OnDelete(DeleteBehavior.Restrict);

                entity.HasOne(ou => ou.Dependent)
                    .WithMany()
                    .HasForeignKey(ou => ou.DependentId)
                    .OnDelete(DeleteBehavior.Restrict);

                // Create indexes for performance
                entity.HasIndex(ou => new { ou.OfferId, ou.EmployeeId, ou.DependentId, ou.UsedAt });
                entity.HasIndex(ou => ou.UsedAt);
                entity.HasIndex(ou => ou.EmployeeId);
                entity.HasIndex(ou => ou.OfferId);
            });

            // Seed initial data
            SeedData(modelBuilder);
        }

        private void SeedData(ModelBuilder modelBuilder)
        {
            // Seed categories
            modelBuilder.Entity<OfferCategory>().HasData(
                new OfferCategory { Id = 1, Name = "عروض متنوعة", Description = "Diverse Offers", Icon = "🎯" },
                new OfferCategory { Id = 2, Name = "خدمات مصرفيه", Description = "Banking Services", Icon = "🏦" },
                new OfferCategory { Id = 3, Name = "صحة وطب", Description = "Health and Medicine", Icon = "🏥" },
                new OfferCategory { Id = 4, Name = "سفر وسياحة", Description = "Travel and Tourism", Icon = "✈️" },
                new OfferCategory { Id = 5, Name = "تسوق وبيع", Description = "Shopping and Retail", Icon = "🛍️" }
            );

            // Seed locations
            modelBuilder.Entity<OfferLocation>().HasData(
                new OfferLocation { Id = 1, Name = "الرياض", City = "الرياض", State = "الرياض", Country = "السعودية", Latitude = 24.7136, Longitude = 46.6753 },
                new OfferLocation { Id = 2, Name = "جدة", City = "جدة", State = "مكة", Country = "السعودية", Latitude = 21.4858, Longitude = 39.1925 },
                new OfferLocation { Id = 3, Name = "أونلاين", City = "", State = "", Country = "", Latitude = null, Longitude = null },
                new OfferLocation { Id = 4, Name = "الدمام", City = "الدمام", State = "الشرقية", Country = "السعودية", Latitude = 26.4207, Longitude = 50.0888 },
                new OfferLocation { Id = 5, Name = "مكة المكرمة", City = "مكة المكرمة", State = "مكة", Country = "السعودية", Latitude = 21.3891, Longitude = 39.8579 },
                new OfferLocation { Id = 6, Name = "المدينة المنورة", City = "المدينة المنورة", State = "المدينة", Country = "السعودية", Latitude = 24.5247, Longitude = 39.5692 },
                new OfferLocation { Id = 7, Name = "الطائف", City = "الطائف", State = "مكة", Country = "السعودية", Latitude = 21.2703, Longitude = 40.4158 },
                new OfferLocation { Id = 8, Name = "بريدة", City = "بريدة", State = "القصيم", Country = "السعودية", Latitude = 26.3260, Longitude = 43.9750 },
                new OfferLocation { Id = 9, Name = "تبوك", City = "تبوك", State = "تبوك", Country = "السعودية", Latitude = 28.3838, Longitude = 36.5550 },
                new OfferLocation { Id = 10, Name = "خميس مشيط", City = "خميس مشيط", State = "عسير", Country = "السعودية", Latitude = 18.3000, Longitude = 42.7333 }
            );


            // Seed platforms
            modelBuilder.Entity<OfferPlatform>().HasData(
                new OfferPlatform { Id = 1, Name = "موقع", Description = "Website", Icon = "🌐" },
                new OfferPlatform { Id = 2, Name = "تطبيق", Description = "Mobile App", Icon = "📱" },
                new OfferPlatform { Id = 3, Name = "واتساب", Description = "WhatsApp", Icon = "💬" },
                new OfferPlatform { Id = 4, Name = "وسائل التواصل", Description = "Social Media", Icon = "📢" },
                new OfferPlatform { Id = 5, Name = "بريد إلكتروني", Description = "Email", Icon = "📧" }
            );

            // Seed sharing methods
            modelBuilder.Entity<OfferSharingMethod>().HasData(
                new OfferSharingMethod { Id = 1, Name = "مشاركة مع التابعين", Description = "Share with Dependents", Icon = "👨‍👩‍👧‍👦" },
                new OfferSharingMethod { Id = 2, Name = "مشاركة مع منسوبي الأمانة", Description = "Share with Municipality Employees", Icon = "👥" },
                new OfferSharingMethod { Id = 3, Name = "مشاركة على وسائل التواصل", Description = "Share on Social Media", Icon = "📱" },
                new OfferSharingMethod { Id = 4, Name = "رابط مباشر", Description = "Direct Link", Icon = "🔗" },
                new OfferSharingMethod { Id = 5, Name = "لا يمكن المشاركة", Description = "Cannot be Shared", Icon = "🚫" }
            );

            // Seed discount types
            modelBuilder.Entity<DiscountType>().HasData(
                new DiscountType { Id = 1, Name = "نسبة مئوية", Description = "Percentage Discount", Icon = "📊" },
                new DiscountType { Id = 2, Name = "عروض خاصة", Description = "Special Offers", Icon = "⭐" },
                new DiscountType { Id = 3, Name = "مبلغ ثابت", Description = "Fixed Amount Discount", Icon = "💰" },
                new DiscountType { Id = 4, Name = "عرض مجاني", Description = "Free Offer", Icon = "🎁" }
            );

            // Seed dependents (relationship types only)
            modelBuilder.Entity<Dependent>().HasData(
                new Dependent { Id = 1, Relationship = "زوجة", RelationshipEnglish = "Wife" },
                new Dependent { Id = 2, Relationship = "ابن", RelationshipEnglish = "Son" },
                new Dependent { Id = 3, Relationship = "أبنة", RelationshipEnglish = "Daughter" },
                new Dependent { Id = 4, Relationship = "أب", RelationshipEnglish = "Father" },
                new Dependent { Id = 5, Relationship = "أم", RelationshipEnglish = "Mother" },
                new Dependent { Id = 6, Relationship = "أخ", RelationshipEnglish = "Brother" },
                new Dependent { Id = 7, Relationship = "أخت", RelationshipEnglish = "Sister" }
            );

            // Seed sample offers
            SampleOffers.SeedSampleOffers(modelBuilder);
            
            // Seed employees
            SeedEmployees(modelBuilder);
            
            // Seed saved offers
            SeedSavedOffers(modelBuilder);
        }
        
        private void SeedEmployees(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Employee>().HasData(
                new Employee 
                { 
                    Id = 1, 
                    EmployeeId = "EMP001", 
                    Name = "محمد عبدالله أحمد", 
                    NameEnglish = "Mohammed Abdullah Ahmed",
                    Position = "مدير وحدة التصوير", 
                    PositionEnglish = "Director of Photography Unit",
                    Rank = 8,
                    Department = "إدارة الإعلام والاتصال المؤسسي", 
                    DepartmentEnglish = "Media and Corporate Communication Department",
                    Email = "mohammed.ahmed@riyadh.gov.sa",
                    PhoneNumber = "+966501234567",
                    CreatedAt = DateTime.UtcNow,
                    IsActive = true
                },
                new Employee 
                { 
                    Id = 2, 
                    EmployeeId = "EMP002", 
                    Name = "فاطمة محمد السعيد", 
                    NameEnglish = "Fatima Mohammed Al-Saeed",
                    Position = "أخصائية علاقات عامة", 
                    PositionEnglish = "Public Relations Specialist",
                    Rank = 6,
                    Department = "إدارة الإعلام والاتصال المؤسسي", 
                    DepartmentEnglish = "Media and Corporate Communication Department",
                    Email = "fatima.alsaeed@riyadh.gov.sa",
                    PhoneNumber = "+966501234568",
                    CreatedAt = DateTime.UtcNow,
                    IsActive = true
                },
                new Employee 
                { 
                    Id = 3, 
                    EmployeeId = "EMP003", 
                    Name = "أحمد خالد المطيري", 
                    NameEnglish = "Ahmed Khalid Al-Mutairi",
                    Position = "مطور تطبيقات", 
                    PositionEnglish = "Application Developer",
                    Rank = 7,
                    Department = "إدارة تقنية المعلومات", 
                    DepartmentEnglish = "Information Technology Department",
                    Email = "ahmed.almutairi@riyadh.gov.sa",
                    PhoneNumber = "+966501234569",
                    CreatedAt = DateTime.UtcNow,
                    IsActive = true
                },
                new Employee 
                { 
                    Id = 4, 
                    EmployeeId = "EMP004", 
                    Name = "نورا عبدالرحمن القحطاني", 
                    NameEnglish = "Nora Abdulrahman Al-Qahtani",
                    Position = "محاسبة", 
                    PositionEnglish = "Accountant",
                    Rank = 5,
                    Department = "إدارة المالية", 
                    DepartmentEnglish = "Finance Department",
                    Email = "nora.alqahtani@riyadh.gov.sa",
                    PhoneNumber = "+966501234570",
                    CreatedAt = DateTime.UtcNow,
                    IsActive = true
                },
                new Employee 
                { 
                    Id = 5, 
                    EmployeeId = "EMP005", 
                    Name = "سعد محمد الغامدي", 
                    NameEnglish = "Saad Mohammed Al-Ghamdi",
                    Position = "مدير الموارد البشرية", 
                    PositionEnglish = "Human Resources Manager",
                    Rank = 9,
                    Department = "إدارة الموارد البشرية", 
                    DepartmentEnglish = "Human Resources Department",
                    Email = "saad.alghamdi@riyadh.gov.sa",
                    PhoneNumber = "+966501234571",
                    CreatedAt = DateTime.UtcNow,
                    IsActive = true
                }
            );
        }
        
        private void SeedSavedOffers(ModelBuilder modelBuilder)
        {
            var savedOffers = new List<SavedOffer>();
            var random = new Random(42);
            
            // Create saved offers for different users
            var userIds = new[] { "user123", "user456", "user789", "user101", "user202" };
            var offerIds = Enumerable.Range(1, 50).ToArray(); // Assuming we have 50 offers
            
            for (int i = 1; i <= 25; i++) // Create 25 saved offers
            {
                var userId = userIds[random.Next(userIds.Length)];
                var offerId = offerIds[random.Next(offerIds.Length)];
                var savedAt = DateTime.UtcNow.AddDays(-random.Next(1, 30));
                
                savedOffers.Add(new SavedOffer
                {
                    Id = i,
                    OfferId = offerId,
                    UserId = userId,
                    SavedAt = savedAt,
                    Notes = random.Next(0, 2) == 1 ? $"ملاحظة للمستخدم {userId}" : null,
                    IsUsed = random.Next(0, 3) == 0, // 33% chance of being used
                    UsedAt = random.Next(0, 3) == 0 ? savedAt.AddDays(random.Next(1, 15)) : null,
                    CreatedAt = savedAt,
                    IsActive = true
                });
            }
            
            modelBuilder.Entity<SavedOffer>().HasData(savedOffers.ToArray());
        }
    }
}
